name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Lint / Type / Tests (Compose)
    runs-on: ubuntu-latest
    env:
      NEXT_TELEMETRY_DISABLED: '1'
      NODE_ENV: test
      JWT_SECRET: ci-test-secret
      DATABASE_URL: postgresql://kosera:kosera123@localhost:5433/kosera_test
      TEST_BASE_URL: http://localhost:3000
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker compose version || echo "Using docker compose plugin"

      - name: Start test database (compose)
        run: |
          docker compose up -d db_test
          echo "Waiting for Postgres to be ready..."
          for i in {1..30}; do
            docker exec kosera-db-test pg_isready -U kosera -d kosera_test && break
            sleep 2
          done
          docker exec kosera-db-test pg_isready -U kosera -d kosera_test

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Apply schema (Drizzle push)
        run: npm run db:push:test

      - name: List migrated tables (debug)
        run: |
          psql "postgresql://kosera:kosera123@localhost:5433/kosera_test" -c "SELECT tablename FROM pg_tables WHERE schemaname='public';"

      - name: Run migrations (defensive)
        run: npm run db:migrate:test || echo "Migrations step completed (non-fatal if already applied)"

      - name: Start Next.js server (background)
        run: |
          npm run dev &
          echo $! > server.pid

      - name: Wait for server readiness
        run: |
          for i in {1..40}; do
            code=$(curl -o /dev/null -s -w "%{http_code}" http://localhost:3000/api/auth/verify || echo 000)
            if [ "$code" != "000" ]; then
              echo "Server responded with HTTP $code";
              break;
            fi
            sleep 2;
          done

      - name: Lint
        run: npm run lint

      - name: Type Check
        run: npm run typecheck

      - name: Unit Tests
        run: npm run test:unit

      - name: Integration Tests
        run: npm run test:integration

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then kill $(cat server.pid) || true; fi

      - name: Coverage (optional)
        run: npm run test:coverage || true

  build:
    name: Build Next App
    runs-on: ubuntu-latest
    needs: test
    env:
      NEXT_TELEMETRY_DISABLED: '1'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: .next
          retention-days: 7